<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Orders</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <style>
        :root {
            --primary-color: #4a90e2;
            --secondary-color: #5cb85c;
            --background-color: #f4f7f9;
            --text-color: #333;
            --card-background: #ffffff;
            --header-height: 60px;
        }

        body,
        html {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Roboto', Arial, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        .container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
            padding-top: calc(var(--header-height) + 20px);
        }

        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: var(--header-height);
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .header h1 {
            font-size: 1.5rem;
            margin: 0;
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .user-info span {
            margin-right: 15px;
        }

        .logout-btn {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .logout-btn:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .search-container {
            flex-grow: 1;
            margin-right: 20px;
        }

        .search-container form {
            display: flex;
            max-width: 500px;
        }

        input[type="text"] {
            flex-grow: 1;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
        }

        button {
            padding: 10px 15px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 14px;
            font-weight: 500;
        }

        .search-container button {
            border-radius: 0 4px 4px 0;
        }

        button:hover {
            background-color: #3a7bc8;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .custom-columns-btn,
        .download-btn {
            background-color: var(--secondary-color);
            padding: 8px 12px;
            font-size: 13px;
        }

        .custom-columns-btn:hover,
        .download-btn:hover {
            background-color: #4cae4c;
        }

        .table-container {
            flex: 1;
            overflow: auto;
            background-color: var(--card-background);
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            min-width: 1000px;
        }

        th,
        td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        th {
            background-color: #f8f9fa;
            color: var(--text-color);
            font-weight: 500;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 0.5px;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        tbody tr:hover {
            background-color: #f5f5f5;
        }

        .clickable-row {
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .info-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .pagination {
            display: flex;
            gap: 10px;
        }

        .pagination button {
            padding: 5px 10px;
            font-size: 14px;
        }

        .pagination button.disabled {
            background-color: #ddd;
            cursor: not-allowed;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .column-list {
            list-style-type: none;
            padding: 0;
        }

        .column-list li {
            margin-bottom: 10px;
        }

        .modal-buttons {
            text-align: right;
            margin-top: 20px;
        }

        .modal-buttons button {
            margin-left: 10px;
        }

        @media (max-width: 768px) {
            .controls {
                flex-direction: column;
                align-items: stretch;
            }

            .search-container {
                margin-right: 0;
                margin-bottom: 10px;
            }

            .action-buttons {
                justify-content: space-between;
            }

            .info-row {
                flex-direction: column;
                align-items: flex-start;
            }

            .info-row>* {
                margin-bottom: 10px;
            }
        }
    </style>
</head>

<body>
    <div class="header">
        <h1>Sales Order System</h1>
        <div class="user-info">
            <span>Welcome, <%= username %></span>
            <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </div>

    <div class="container">
        <div class="controls">
            <div class="search-container">
                <form action="/" method="GET">
                    <input type="text" id="orderNumber" name="orderNumber" placeholder="Search by order number"
                        value="<%= orderNumber || '' %>">
                    <button type="submit"><i class="fas fa-search"></i> Search</button>
                </form>
            </div>
            <div class="action-buttons">
                <button id="customColumnsBtn" class="custom-columns-btn"><i class="fas fa-columns"></i>
                    Customize</button>
                <button id="downloadBtn" class="download-btn"><i class="fas fa-download"></i> Download</button>
            </div>
        </div>

        <% if (salesOrders.length===0 && orderNumber) { %>
            <div class="error-message">No sales orders found for the given order number.</div>
            <% } %>

                <div class="table-container">
                    <table id="salesOrderTable">
                        <thead>
                            <tr>
                                <th data-column="date">Date</th>
                                <th data-column="salesorder_number">Sales Order#</th>
                                <th data-column="customer_name">Customer Name</th>
                                <th data-column="reference_number">Reference#</th>
                                <th data-column="total">Amount</th>
                                <th data-column="status">Status</th>
                                <th data-column="invoiced_status">Invoiced</th>
                                <th data-column="payment_status">Payment</th>
                                <th data-column="expected_shipment_date">Expected Shipment Date</th>
                                <th data-column="order_status">Order Status</th>
                                <th data-column="delivery_method">Delivery Method</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (salesOrders.length===0) { %>
                                <tr>
                                    <td colspan="11" style="text-align: center; color: red; font-weight: bold;">No sales
                                        orders found for the given order number.</td>
                                </tr>
                                <% } else { %>
                                    <% salesOrders.forEach(order=> { %>
                                        <tr class="clickable-row"
                                            data-href="/details/<%= order.salesorder_id || '—' %>">
                                            <td data-column="date">
                                                <%= order.date || '—' %>
                                            </td>
                                            <td data-column="salesorder_number">
                                                <%= order.salesorder_number || '—' %>
                                            </td>
                                            <td data-column="customer_name">
                                                <%= order.customer_name || '—' %>
                                            </td>
                                            <td data-column="reference_number">
                                                <%= order.reference_number || '—' %>
                                            </td>
                                            <td data-column="total">
                                                <%= new Intl.NumberFormat('en-IN', { style: 'currency' , currency: 'INR'
                                                    }).format(order.total) || '—' %>
                                            </td>
                                            <td data-column="status">
                                                <%= order.status || '—' %>
                                            </td>
                                            <td data-column="invoiced_status">
                                                <%= (order.invoiced_status && order.invoiced_status !=='not_invoiced' )
                                                    ? order.invoiced_status : '—' %>
                                            </td>
                                            <td data-column="payment_status">
                                                <%= order.payment_status || '—' %>
                                            </td>
                                            <td data-column="expected_shipment_date">
                                                <%= order.expected_shipment_date || '—' %>
                                            </td>
                                            <td data-column="order_status">
                                                <%= (order.order_status && order.order_status !=='pending_approval' ) ?
                                                    order.order_status : 'pending approval' %>
                                            </td>
                                            <td data-column="delivery_method">
                                                <%= order.delivery_method || '—' %>
                                            </td>
                                        </tr>
                                        <% }); %>
                                            <% } %>
                        </tbody>
                    </table>
                </div>

                <div class="info-row">
                    <div class="item-count">
                        Showing <%= startItem %> - <%= endItem %> of <%= totalItems %> items
                    </div>
                    <div class="pagination">
                        <button id="prevButton" <%=page===1 ? 'class="disabled"' : '' %>>Previous</button>
                        <button id="nextButton" <%=page===totalPages ? 'class="disabled"' : '' %>>Next</button>
                    </div>
                </div>
    </div>

    <!-- Custom Columns Modal -->
    <div id="customColumnsModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Customize Columns</h2>
            <ul id="columnList" class="column-list"></ul>
            <div class="modal-buttons">
                <button id="saveColumns">Save</button>
                <button id="cancelColumns">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Download Options Modal -->
    <div id="downloadModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Download Options</h2>
            <div class="download-options">
                <label for="downloadCount">Number of records:</label>
                <input type="number" id="downloadCount" min="1" max="1000" value="100">
                <button onclick="downloadData('excel')">Download Excel</button>
                <button onclick="downloadData('csv')">Download CSV</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const customColumnsBtn = document.getElementById('customColumnsBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const customColumnsModal = document.getElementById('customColumnsModal');
            const downloadModal = document.getElementById('downloadModal');
            const closeButtons = document.querySelectorAll('.close');
            const saveColumnsBtn = document.getElementById('saveColumns');
            const cancelColumnsBtn = document.getElementById('cancelColumns');
            const columnList = document.getElementById('columnList');
            const table = document.getElementById('salesOrderTable');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');

            const columns = [
                { name: 'date', label: 'Date', locked: true },
                { name: 'salesorder_number', label: 'Sales Order#', locked: true },
                { name: 'customer_name', label: 'Customer Name', locked: true },
                { name: 'reference_number', label: 'Reference#' },
                { name: 'total', label: 'Amount', locked: true },
                { name: 'status', label: 'Status' },
                { name: 'invoiced_status', label: 'Invoiced' },
                { name: 'payment_status', label: 'Payment' },
                { name: 'expected_shipment_date', label: 'Expected Shipment Date' },
                { name: 'order_status', label: 'Order Status', locked: true },
                { name: 'delivery_method', label: 'Delivery Method' }
            ];

            function showModal(modal) {
                modal.style.display = 'block';
            }

            function hideModal(modal) {
                modal.style.display = 'none';
            }

            function populateColumnList() {
                columnList.innerHTML = '';
                columns.forEach(function (column) {
                    const li = document.createElement('li');
                    li.innerHTML = `
                        <label>
                            <input type="checkbox" name="column" value="${column.name}"
                                ${isColumnVisible(column.name) ? 'checked' : ''}
                                ${column.locked ? 'disabled' : ''}>
                            ${column.label}
                        </label>
                    `;
                    columnList.appendChild(li);
                });
            }

            function isColumnVisible(columnName) {
                const th = table.querySelector(`th[data-column="${columnName}"]`);
                return th.style.display !== 'none';
            }

            function toggleColumns() {
                const checkboxes = columnList.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(function (checkbox) {
                    const columnName = checkbox.value;
                    const cells = table.querySelectorAll(`th[data-column="${columnName}"], td[data-column="${columnName}"]`);
                    cells.forEach(function (cell) {
                        cell.style.display = checkbox.checked ? '' : 'none';
                    });
                });
            }

            function saveColumnPreferences() {
                const preferences = {};
                columns.forEach(function (column) {
                    preferences[column.name] = isColumnVisible(column.name);
                });
                localStorage.setItem('columnPreferences', JSON.stringify(preferences));
            }

            function loadColumnPreferences() {
                const savedPreferences = localStorage.getItem('columnPreferences');
                if (savedPreferences) {
                    const preferences = JSON.parse(savedPreferences);
                    columns.forEach(function (column) {
                        const isVisible = preferences[column.name];
                        const cells = table.querySelectorAll(`th[data-column="${column.name}"], td[data-column="${column.name}"]`);
                        cells.forEach(function (cell) {
                            cell.style.display = isVisible ? '' : 'none';
                        });
                    });
                }
            }

            function downloadData(format) {
                const count = document.getElementById('downloadCount').value;
                // Implement your download logic here
                console.log(`Downloading ${count} records in ${format} format`);
                hideModal(downloadModal);
            }

            customColumnsBtn.addEventListener('click', function () {
                populateColumnList();
                showModal(customColumnsModal);
            });

            downloadBtn.addEventListener('click', function () {
                showModal(downloadModal);
            });

            closeButtons.forEach(function (button) {
                button.addEventListener('click', function () {
                    hideModal(this.closest('.modal'));
                });
            });

            saveColumnsBtn.addEventListener('click', function () {
                toggleColumns();
                saveColumnPreferences();
                hideModal(customColumnsModal);
            });

            cancelColumnsBtn.addEventListener('click', function () {
                hideModal(customColumnsModal);
            });

            prevButton.addEventListener('click', function () {
                if (!this.classList.contains('disabled')) {
                    // Implement previous page logic
                    console.log('Go to previous page');
                }
            });

            nextButton.addEventListener('click', function () {
                if (!this.classList.contains('disabled')) {
                    // Implement next page logic
                    console.log('Go to next page');
                }
            });

            // Clickable rows
            const rows = document.querySelectorAll('.clickable-row');
            rows.forEach(function (row) {
                row.addEventListener('click', function () {
                    const url = this.dataset.href;
                    // Implement navigation logic
                    console.log(`Navigating to: ${url}`);
                });
            });

            // Initialize
            loadColumnPreferences();
        });
    </script>
</body>

</html>